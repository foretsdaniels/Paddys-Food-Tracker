"""
PDF report generation for the Restaurant Ingredient Tracker.
"""

import io
from datetime import datetime
from typing import Dict, List

import pandas as pd
from fpdf import FPDF


class PDFReportGenerator:
    """Generates PDF reports for ingredient tracking data."""
    
    def __init__(self):
        """Initialize PDF generator."""
        self.font_size_title = 16
        self.font_size_subtitle = 14
        self.font_size_text = 10
        self.font_size_small = 8
    
    def generate_report(self, data: pd.DataFrame, summary_stats: Dict, username: str) -> io.BytesIO:
        """Generate a comprehensive PDF report."""
        pdf = FPDF()
        pdf.add_page()
        
        # Header
        self._add_header(pdf, username)
        
        # Summary section
        self._add_summary_section(pdf, summary_stats)
        
        # Top items section
        self._add_top_items_section(pdf, data)
        
        # Detailed data table
        self._add_detailed_table(pdf, data)
        
        # Footer
        self._add_footer(pdf)
        
        # Save to buffer
        buffer = io.BytesIO()
        pdf_output = pdf.output(dest='S').encode('latin1')
        buffer.write(pdf_output)
        buffer.seek(0)
        
        return buffer
    
    def _add_header(self, pdf: FPDF, username: str):
        """Add report header."""
        pdf.set_font('Arial', 'B', self.font_size_title)
        pdf.cell(0, 10, 'Restaurant Ingredient Tracker Report', 0, 1, 'C')
        
        pdf.set_font('Arial', '', self.font_size_text)
        pdf.cell(0, 5, f'Generated by: {username}', 0, 1, 'C')
        pdf.cell(0, 5, f'Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', 0, 1, 'C')
        pdf.ln(10)
    
    def _add_summary_section(self, pdf: FPDF, stats: Dict):
        """Add summary statistics section."""
        pdf.set_font('Arial', 'B', self.font_size_subtitle)
        pdf.cell(0, 8, 'Summary Statistics', 0, 1, 'L')
        
        pdf.set_font('Arial', '', self.font_size_text)
        
        # Two-column layout for summary stats
        col_width = 95
        
        # Left column
        pdf.cell(col_width, 6, f'Total Ingredients: {stats["total_ingredients"]}', 0, 0, 'L')
        pdf.cell(col_width, 6, f'Total Cost: ${stats["total_cost"]:.2f}', 0, 1, 'L')
        
        pdf.cell(col_width, 6, f'Total Waste Cost: ${stats["total_waste_cost"]:.2f}', 0, 0, 'L')
        pdf.cell(col_width, 6, f'Total Shrinkage Cost: ${stats["total_shrinkage_cost"]:.2f}', 0, 1, 'L')
        
        pdf.cell(col_width, 6, f'Avg Waste %: {stats["avg_waste_percentage"]:.1f}%', 0, 0, 'L')
        pdf.cell(col_width, 6, f'Avg Shrinkage %: {stats["avg_shrinkage_percentage"]:.1f}%', 0, 1, 'L')
        
        pdf.cell(col_width, 6, f'High Shrinkage Items: {stats["high_shrinkage_items"]}', 0, 0, 'L')
        pdf.cell(col_width, 6, f'Missing Stock Items: {stats["missing_stock_items"]}', 0, 1, 'L')
        
        pdf.ln(10)
    
    def _add_top_items_section(self, pdf: FPDF, data: pd.DataFrame):
        """Add top problematic items section."""
        pdf.set_font('Arial', 'B', self.font_size_subtitle)
        pdf.cell(0, 8, 'Top Issues', 0, 1, 'L')
        
        pdf.set_font('Arial', '', self.font_size_text)
        
        # Top shrinkage items
        top_shrinkage = data.nlargest(5, 'Shrinkage Cost')
        if not top_shrinkage.empty:
            pdf.set_font('Arial', 'B', self.font_size_text)
            pdf.cell(0, 6, 'Top Shrinkage Items:', 0, 1, 'L')
            pdf.set_font('Arial', '', self.font_size_small)
            
            for _, item in top_shrinkage.iterrows():
                pdf.cell(0, 5, f'• {item["Ingredient"]}: ${item["Shrinkage Cost"]:.2f}', 0, 1, 'L')
        
        pdf.ln(5)
        
        # Top waste items
        top_waste = data.nlargest(5, 'Waste %')
        if not top_waste.empty:
            pdf.set_font('Arial', 'B', self.font_size_text)
            pdf.cell(0, 6, 'Top Waste Items:', 0, 1, 'L')
            pdf.set_font('Arial', '', self.font_size_small)
            
            for _, item in top_waste.iterrows():
                pdf.cell(0, 5, f'• {item["Ingredient"]}: {item["Waste %"]:.1f}%', 0, 1, 'L')
        
        pdf.ln(10)
    
    def _add_detailed_table(self, pdf: FPDF, data: pd.DataFrame):
        """Add detailed data table."""
        # Add new page for table if needed
        if pdf.get_y() > 200:
            pdf.add_page()
        
        pdf.set_font('Arial', 'B', self.font_size_subtitle)
        pdf.cell(0, 8, 'Detailed Breakdown', 0, 1, 'L')
        
        # Table headers
        pdf.set_font('Arial', 'B', self.font_size_small)
        col_widths = [35, 25, 25, 25, 25, 25, 30]
        headers = ['Ingredient', 'Received', 'Used', 'Wasted', 'Shrinkage', 'Waste %', 'Shrinkage $']
        
        for i, header in enumerate(headers):
            pdf.cell(col_widths[i], 6, header, 1, 0, 'C')
        pdf.ln()
        
        # Table data
        pdf.set_font('Arial', '', self.font_size_small)
        
        # Show top 20 items by shrinkage cost
        top_items = data.nlargest(20, 'Shrinkage Cost')
        
        for _, row in top_items.iterrows():
            # Check if we need a new page
            if pdf.get_y() > 270:
                pdf.add_page()
                # Re-add headers
                pdf.set_font('Arial', 'B', self.font_size_small)
                for i, header in enumerate(headers):
                    pdf.cell(col_widths[i], 6, header, 1, 0, 'C')
                pdf.ln()
                pdf.set_font('Arial', '', self.font_size_small)
            
            # Truncate ingredient name if too long
            ingredient = row['Ingredient'][:15] + '...' if len(row['Ingredient']) > 15 else row['Ingredient']
            
            pdf.cell(col_widths[0], 5, ingredient, 1, 0, 'L')
            pdf.cell(col_widths[1], 5, f'{row["Received Qty"]:.1f}', 1, 0, 'R')
            pdf.cell(col_widths[2], 5, f'{row["Used Qty"]:.1f}', 1, 0, 'R')
            pdf.cell(col_widths[3], 5, f'{row["Wasted Qty"]:.1f}', 1, 0, 'R')
            pdf.cell(col_widths[4], 5, f'{row["Shrinkage"]:.1f}', 1, 0, 'R')
            pdf.cell(col_widths[5], 5, f'{row["Waste %"]:.1f}%', 1, 0, 'R')
            pdf.cell(col_widths[6], 5, f'${row["Shrinkage Cost"]:.2f}', 1, 0, 'R')
            pdf.ln()
    
    def _add_footer(self, pdf: FPDF):
        """Add report footer."""
        pdf.ln(10)
        pdf.set_font('Arial', 'I', self.font_size_small)
        pdf.cell(0, 5, 'Generated by Restaurant Ingredient Tracker - Flask Edition', 0, 1, 'C')
        pdf.cell(0, 5, 'Focus on items with high shrinkage costs for inventory management improvements', 0, 1, 'C')