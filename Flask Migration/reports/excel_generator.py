"""
Excel report generation for the Restaurant Ingredient Tracker.
"""

import io
from datetime import datetime
from typing import Dict, List

import pandas as pd
import xlsxwriter


class ExcelReportGenerator:
    """Generates Excel reports for ingredient tracking data."""
    
    def __init__(self):
        """Initialize Excel generator."""
        pass
    
    def generate_report(self, data: pd.DataFrame, summary_stats: Dict, insights: List[str], username: str) -> io.BytesIO:
        """Generate a comprehensive Excel report."""
        buffer = io.BytesIO()
        
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            workbook = writer.book
            
            # Create formats
            formats = self._create_formats(workbook)
            
            # Summary sheet
            self._create_summary_sheet(writer, summary_stats, insights, username, formats)
            
            # Detailed data sheet
            self._create_data_sheet(writer, data, formats)
            
            # Analysis sheet
            self._create_analysis_sheet(writer, data, formats)
            
            # Charts sheet
            self._create_charts_sheet(writer, data, formats)
        
        buffer.seek(0)
        return buffer
    
    def _create_formats(self, workbook):
        """Create cell formats for the workbook."""
        return {
            'title': workbook.add_format({
                'bold': True,
                'font_size': 16,
                'align': 'center',
                'valign': 'vcenter'
            }),
            'subtitle': workbook.add_format({
                'bold': True,
                'font_size': 12,
                'align': 'left',
                'bg_color': '#E6E6FA'
            }),
            'header': workbook.add_format({
                'bold': True,
                'font_size': 10,
                'align': 'center',
                'valign': 'vcenter',
                'bg_color': '#4F81BD',
                'font_color': 'white',
                'border': 1
            }),
            'currency': workbook.add_format({
                'num_format': '$#,##0.00',
                'align': 'right'
            }),
            'percentage': workbook.add_format({
                'num_format': '0.0%',
                'align': 'right'
            }),
            'number': workbook.add_format({
                'num_format': '#,##0.0',
                'align': 'right'
            }),
            'high_shrinkage': workbook.add_format({
                'bg_color': '#FFB6C1',
                'num_format': '$#,##0.00'
            }),
            'high_waste': workbook.add_format({
                'bg_color': '#FFE4B5',
                'num_format': '0.0%'
            }),
            'date': workbook.add_format({
                'num_format': 'yyyy-mm-dd hh:mm',
                'align': 'center'
            })
        }
    
    def _create_summary_sheet(self, writer, stats: Dict, insights: List[str], username: str, formats):
        """Create summary statistics sheet."""
        worksheet = writer.book.add_worksheet('Summary')
        
        # Title
        worksheet.merge_range('A1:D1', 'Restaurant Ingredient Tracker Report', formats['title'])
        
        # Report info
        worksheet.write('A3', 'Generated by:', formats['subtitle'])
        worksheet.write('B3', username)
        worksheet.write('A4', 'Date:', formats['subtitle'])
        worksheet.write('B4', datetime.now(), formats['date'])
        
        # Summary statistics
        worksheet.write('A6', 'Summary Statistics', formats['subtitle'])
        
        summary_data = [
            ['Total Ingredients', stats['total_ingredients']],
            ['Total Cost', stats['total_cost']],
            ['Total Waste Cost', stats['total_waste_cost']],
            ['Total Shrinkage Cost', stats['total_shrinkage_cost']],
            ['Average Waste %', stats['avg_waste_percentage'] / 100],
            ['Average Shrinkage %', stats['avg_shrinkage_percentage'] / 100],
            ['High Shrinkage Items', stats['high_shrinkage_items']],
            ['Missing Stock Items', stats['missing_stock_items']]
        ]
        
        for i, (label, value) in enumerate(summary_data, start=7):
            worksheet.write(f'A{i}', label)
            if 'Cost' in label and label != 'Total Cost':
                worksheet.write(f'B{i}', value, formats['currency'])
            elif 'Total Cost' in label:
                worksheet.write(f'B{i}', value, formats['currency'])
            elif '%' in label:
                worksheet.write(f'B{i}', value, formats['percentage'])
            else:
                worksheet.write(f'B{i}', value)
        
        # Insights
        if insights:
            worksheet.write('A16', 'Key Insights', formats['subtitle'])
            for i, insight in enumerate(insights, start=17):
                worksheet.write(f'A{i}', f'â€¢ {insight}')
        
        # Adjust column widths
        worksheet.set_column('A:A', 25)
        worksheet.set_column('B:B', 20)
    
    def _create_data_sheet(self, writer, data: pd.DataFrame, formats):
        """Create detailed data sheet."""
        worksheet = writer.book.add_worksheet('Detailed Data')
        
        # Write headers
        headers = [
            'Ingredient', 'Unit Cost', 'Received Qty', 'Used Qty', 'Wasted Qty',
            'Expected Use', 'Shrinkage', 'Used Cost', 'Waste Cost', 
            'Shrinkage Cost', 'Total Cost', 'Waste %', 'Shrinkage %'
        ]
        
        for col, header in enumerate(headers):
            worksheet.write(0, col, header, formats['header'])
        
        # Write data
        for row, (_, item) in enumerate(data.iterrows(), start=1):
            worksheet.write(row, 0, item['Ingredient'])
            worksheet.write(row, 1, item['Unit Cost'], formats['currency'])
            worksheet.write(row, 2, item['Received Qty'], formats['number'])
            worksheet.write(row, 3, item['Used Qty'], formats['number'])
            worksheet.write(row, 4, item['Wasted Qty'], formats['number'])
            worksheet.write(row, 5, item['Expected Use'], formats['number'])
            worksheet.write(row, 6, item['Shrinkage'], formats['number'])
            worksheet.write(row, 7, item['Used Cost'], formats['currency'])
            worksheet.write(row, 8, item['Waste Cost'], formats['currency'])
            
            # Conditional formatting for high shrinkage
            if item['Shrinkage Cost'] > 10:
                worksheet.write(row, 9, item['Shrinkage Cost'], formats['high_shrinkage'])
            else:
                worksheet.write(row, 9, item['Shrinkage Cost'], formats['currency'])
            
            worksheet.write(row, 10, item['Total Cost'], formats['currency'])
            
            # Conditional formatting for high waste
            if item['Waste %'] > 5:
                worksheet.write(row, 11, item['Waste %'] / 100, formats['high_waste'])
            else:
                worksheet.write(row, 11, item['Waste %'] / 100, formats['percentage'])
            
            worksheet.write(row, 12, item['Shrinkage %'] / 100, formats['percentage'])
        
        # Adjust column widths
        worksheet.set_column('A:A', 20)  # Ingredient
        worksheet.set_column('B:L', 12)  # Numeric columns
        
        # Freeze top row
        worksheet.freeze_panes(1, 0)
    
    def _create_analysis_sheet(self, writer, data: pd.DataFrame, formats):
        """Create analysis sheet with top performers and issues."""
        worksheet = writer.book.add_worksheet('Analysis')
        
        # Top shrinkage items
        worksheet.write('A1', 'Top 10 Shrinkage Items', formats['subtitle'])
        top_shrinkage = data.nlargest(10, 'Shrinkage Cost')[['Ingredient', 'Shrinkage Cost']]
        
        worksheet.write('A3', 'Ingredient', formats['header'])
        worksheet.write('B3', 'Shrinkage Cost', formats['header'])
        
        for i, (_, item) in enumerate(top_shrinkage.iterrows(), start=4):
            worksheet.write(f'A{i}', item['Ingredient'])
            worksheet.write(f'B{i}', item['Shrinkage Cost'], formats['currency'])
        
        # Top waste items
        worksheet.write('D1', 'Top 10 Waste Items', formats['subtitle'])
        top_waste = data.nlargest(10, 'Waste %')[['Ingredient', 'Waste %']]
        
        worksheet.write('D3', 'Ingredient', formats['header'])
        worksheet.write('E3', 'Waste %', formats['header'])
        
        for i, (_, item) in enumerate(top_waste.iterrows(), start=4):
            worksheet.write(f'D{i}', item['Ingredient'])
            worksheet.write(f'E{i}', item['Waste %'] / 100, formats['percentage'])
        
        # Cost breakdown
        worksheet.write('A16', 'Cost Breakdown', formats['subtitle'])
        total_used = data['Used Cost'].sum()
        total_waste = data['Waste Cost'].sum()
        total_shrinkage = data['Shrinkage Cost'].sum()
        
        cost_data = [
            ['Used Cost', total_used],
            ['Waste Cost', total_waste],
            ['Shrinkage Cost', total_shrinkage],
            ['Total Cost', total_used + total_waste + total_shrinkage]
        ]
        
        worksheet.write('A18', 'Category', formats['header'])
        worksheet.write('B18', 'Amount', formats['header'])
        
        for i, (category, amount) in enumerate(cost_data, start=19):
            worksheet.write(f'A{i}', category)
            worksheet.write(f'B{i}', amount, formats['currency'])
        
        # Adjust column widths
        worksheet.set_column('A:E', 20)
    
    def _create_charts_sheet(self, writer, data: pd.DataFrame, formats):
        """Create charts sheet with visualizations."""
        worksheet = writer.book.add_worksheet('Charts')
        workbook = writer.book
        
        # Cost breakdown pie chart
        chart = workbook.add_chart({'type': 'pie'})
        
        # Use data from Analysis sheet
        chart.add_series({
            'name': 'Cost Breakdown',
            'categories': '=Analysis!$A$19:$A$21',
            'values': '=Analysis!$B$19:$B$21',
            'data_labels': {'percentage': True},
        })
        
        chart.set_title({'name': 'Cost Breakdown'})
        chart.set_size({'width': 480, 'height': 288})
        worksheet.insert_chart('A2', chart)
        
        # Top shrinkage bar chart
        chart2 = workbook.add_chart({'type': 'column'})
        
        chart2.add_series({
            'name': 'Shrinkage Cost',
            'categories': '=Analysis!$A$4:$A$8',  # Top 5 items
            'values': '=Analysis!$B$4:$B$8',
        })
        
        chart2.set_title({'name': 'Top 5 Shrinkage Items'})
        chart2.set_x_axis({'name': 'Ingredient'})
        chart2.set_y_axis({'name': 'Shrinkage Cost ($)'})
        chart2.set_size({'width': 480, 'height': 288})
        worksheet.insert_chart('A20', chart2)