version: '3.8'

services:
  flask-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: restaurant-tracker-flask-prod
    restart: unless-stopped
    
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
      - PORT=5000
      - DEBUG=False
      - WORKERS=2
    
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
      - app-data:/app/data
    
    networks:
      - restaurant-tracker-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: restaurant-tracker-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    
    depends_on:
      - flask-app
    
    networks:
      - restaurant-tracker-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Optional: PostgreSQL for future database integration
  # postgres:
  #   image: postgres:13
  #   container_name: restaurant-tracker-db
  #   restart: unless-stopped
  #   
  #   environment:
  #     POSTGRES_DB: restaurant_tracker
  #     POSTGRES_USER: ${DB_USER:-tracker}
  #     POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
  #   
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #     - ./backups:/backups
  #   
  #   networks:
  #     - restaurant-tracker-network
  #   
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-tracker}"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # Optional: Redis for caching and session storage
  # redis:
  #   image: redis:alpine
  #   container_name: restaurant-tracker-redis
  #   restart: unless-stopped
  #   
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
  #   
  #   volumes:
  #     - redis-data:/data
  #   
  #   networks:
  #     - restaurant-tracker-network
  #   
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  app-data:
  # postgres-data:
  # redis-data:

networks:
  restaurant-tracker-network:
    driver: bridge